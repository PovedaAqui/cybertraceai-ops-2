# CyberTrace AI Environment Configuration Template
# Copy this file to .env and fill in your actual values

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL connection settings (auto-configured for Docker deployment)
POSTGRES_DB=cybertraceai
POSTGRES_USER=postgres
POSTGRES_PASSWORD=cybertraceai2024

# Full database URL (auto-constructed in Docker, but you can override)
POSTGRES_URL=postgresql://postgres:cybertraceai2024@localhost:5432/cybertraceai

# =============================================================================
# NEXTAUTH.JS AUTHENTICATION
# =============================================================================
# NextAuth configuration
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-super-secret-jwt-secret-here-change-this

# Google OAuth Provider (required for authentication)
# Get these from Google Cloud Console: https://console.cloud.google.com/
AUTH_GOOGLE_ID=your_google_client_id_here
AUTH_GOOGLE_SECRET=your_google_client_secret_here

# =============================================================================
# AI INTEGRATION
# =============================================================================
# OpenRouter API Key (REQUIRED for AI chat functionality)
# Get your key from: https://openrouter.ai/keys
OPENROUTER_API_KEY=your_openrouter_api_key_here

# OpenRouter Base URL (optional, uses default if not set)
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1

# =============================================================================
# SUZIEQ MCP SERVER (Network Observability)
# =============================================================================
# SuzieQ REST API configuration for network observability
# Update the endpoint to point to your SuzieQ server and provide a valid API key
SUZIEQ_API_ENDPOINT=http://host.docker.internal:8000/api/v2
SUZIEQ_API_KEY=your_suzieq_api_key_here

# MCP Docker Network Configuration (optional)
# Options: 'auto' (default), 'host', or specific network name
# - 'auto': Auto-detect Docker Compose network or fallback to host networking
# - 'host': Use host networking (good for local development)
# - specific name: Use exact network name (e.g., 'cybertraceai-ops-2_cybertraceai_network')
MCP_DOCKER_NETWORK=auto

# =============================================================================
# DEVELOPMENT/TESTING
# =============================================================================
# Set to development for local development
NODE_ENV=production

# =============================================================================
# DOCKER-SPECIFIC OVERRIDES
# =============================================================================
# The following are automatically configured when using Docker Compose,
# but you can override them if needed:

# For local development (non-Docker), change database host to localhost
# POSTGRES_URL=postgresql://postgres:cybertraceai2024@localhost:5432/cybertraceai

# For local development (non-Docker), use localhost for SuzieQ endpoint
# SUZIEQ_API_ENDPOINT=http://localhost:8000/api/v2

# Docker Integration Notes:
# - The app container includes Docker CLI for MCP container management
# - Docker socket is mounted for container spawning: /var/run/docker.sock
# - SuzieQ tools run in temporary, isolated containers
# - Use host.docker.internal for container-to-host API communication
# - MCP_DOCKER_NETWORK auto-detects Docker Compose networks for seamless dev/prod deployment
# - Fallback to host networking when no Docker Compose network is available (local development)

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Set your OPENROUTER_API_KEY (required for AI functionality)
# 3. Set your Google OAuth credentials:
#    - AUTH_GOOGLE_ID (from Google Cloud Console)
#    - AUTH_GOOGLE_SECRET (from Google Cloud Console)
# 4. Generate a secure NEXTAUTH_SECRET (use a long random string)
# 5. Configure SuzieQ network observability:
#    - SUZIEQ_API_ENDPOINT (point to your SuzieQ server)
#    - SUZIEQ_API_KEY (valid API key for your SuzieQ instance)
# 6. Run: docker compose up -d
# 7. Access the app at: http://localhost:3000
#
# For SuzieQ setup, ensure you have a SuzieQ server running with REST API
# accessible at the configured endpoint. The app will use Docker CLI to spawn
# temporary MCP containers for network analysis tools.