version: '3.8'

# Development overrides for docker-compose.yml
# Usage: docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps  # Stop at deps stage for development
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules  # Preserve node_modules from container
      - /app/.next  # Preserve .next build cache
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      # Override for development
      - NEXTAUTH_URL=http://localhost:3000
    command: ["pnpm", "dev", "--port", "3000", "--hostname", "0.0.0.0"]
    ports:
      - "3000:3000"
    healthcheck:
      # More frequent health checks in development
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      database:
        condition: service_healthy
      suzieq-mcp:
        condition: service_started  # Don't wait for MCP health in dev

  database:
    environment:
      # Development database settings
      - POSTGRES_DB=cybertraceai_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=dev_password_2024
    ports:
      # Expose database port for development tools
      - "5432:5432"
    volumes:
      # Use separate volume for development data
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      # Faster health checks in development
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 15s

  suzieq-mcp:
    environment:
      # Development MCP settings
      - SUZIEQ_API_ENDPOINT=http://suzieq-mcp:8000/api/v2
      - SUZIEQ_API_KEY=dev-suzieq-key-2024
    # Expose MCP port for debugging (optional)
    ports:
      - "8000:8000"
    healthcheck:
      # More lenient health checks in development
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 20s

  # Development tools service (optional)
  dev-tools:
    image: node:18-alpine
    container_name: cybertraceai-dev-tools
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - cybertraceai_network
    profiles:
      - tools  # Only start when specifically requested
    command: ["tail", "-f", "/dev/null"]  # Keep container running

volumes:
  postgres_dev_data:
    driver: local

# Development-specific network configuration
networks:
  cybertraceai_network:
    driver: bridge