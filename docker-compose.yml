services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cybertraceai-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD:-cybertraceai2024}@database:5432/${POSTGRES_DB:-cybertraceai}
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SUZIEQ_API_ENDPOINT=${SUZIEQ_API_ENDPOINT:-}
      - SUZIEQ_API_KEY=${SUZIEQ_API_KEY:-}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - cybertraceai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "node healthcheck.js && psql -h database -U postgres -d cybertraceai -c 'SELECT 1 FROM account LIMIT 1' >/dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  database:
    image: postgres:15-alpine
    container_name: cybertraceai-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cybertraceai}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cybertraceai2024}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - cybertraceai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-cybertraceai}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # suzieq-mcp:
  #   image: mcp/suzieq-mcp:latest
  #   container_name: cybertraceai-suzieq
  #   environment:
  #     - SUZIEQ_API_ENDPOINT=http://suzieq-mcp:8000/api/v2
  #     - SUZIEQ_API_KEY=${SUZIEQ_API_KEY:-suzieq-default-key}
  #   networks:
  #     - cybertraceai_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  cybertraceai_network:
    driver: bridge